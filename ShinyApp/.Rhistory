shiny::runApp('~/Seneca/Dan/alignment')
output$score <- renderPrint({
if (is.null(v[["score"]])) return()
else return(score)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
v <- reactiveValues()
v1 <- v()
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
score <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score[,1][1] <- 0
for(i in seq(2,length(seqA)+1,by=1)){
score[i,][1] <- score[(i-1),][1] + gapPen
trace[i,][1] <- 2
}
score
for (j in seq(2,length(seqB)+1,by=1)){
score[1,][j] <- score[1,][j-1] +gapPen
trace[1,][j] <- 1
}
score
trace
trace <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
trace <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score[,1][1] <- 0
trace[,1][1] <- 0
for(i in seq(2,length(seqA)+1,by=1)){
score[i,][1] <- score[(i-1),][1] + gapPen
trace[i,][1] <- 2
}
for (j in seq(2,length(seqB)+1,by=1)){
score[1,][j] <- score[1,][j-1] +gapPen
trace[1,][j] <- 1
}
score
trace
list(score,trace)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
?reactive
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
(top == left & top > topleft)
## Setting up the id matrix
Abp <- c(1,0,0,0)
Cbp <- c(0,1,0,0)
Tbp <- c(0,0,1,0)
Gbp <- c(0,0,0,1)
dna <- c("A","C","T","G")
dim <- list(x=dna,y=dna)
id_matrix <- matrix(data=c(Abp,Cbp,Tbp,Gbp),nrow=4,ncol=4,dimnames=dim)
traceFun <- function(top, left, topleft){
## Function that returns the traceback direction in the trace matrix
## Inputs are vectors of 3 (NW) or 4 (SW)
# 1=left
if(left > top & left > topleft){
return(1)
}
# 2=top
else if(top > left & top > topleft){
return(2)
}
# 3=top and left
else if(top == left & top > topleft){
return(3)
}
# 4=topleft
else if(topleft > left & topleft > top){
return(4)
}
# 5=topleft and left
else if(topleft == left & topleft > top){
return(5)
}
# 6=topleft and top
else if(topleft > left & topleft == top){
return(6)
}
# 7=topleft, left and top
else if(topleft == left & topleft == top){
return(7)
}
}
NW <- function(seqA,seqB,gapPen,id_matrix){
# Creates empty matrices
start <- create(seqA,seqB,gapPen)
score <- start[[1]]
trace <- start[[2]]
for (i in seq(2,length(seqA)+1,by=1)){
for (j in seq(2,length(seqB)+1,by=1)){
# Finds the match score
posA <- seqA[i-1]
posB <- seqB[j-1]
posA <- match(posA,dna)
posB <- match(posB,dna)
matchVal <- id_matrix[posA,][posB]
# Determines the top score
topleft <- score[(i-1),][j-1] + matchVal
top <- score[(i-1),][j] + gapPen
left <- score[i,][j-1] + gapPen
# insert values into matrices
score[i,][j] <- max(top,left,topleft)
trace[i,][j] <- traceFun(top,left,topleft)
}
}
return(list(score,trace))
}
## Function to create empty trace and score matrices
create <- function(seqA,seqB,gapPen){
score <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
trace <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score[,1][1] <- 0
trace[,1][1] <- 0
for(i in seq(2,length(seqA)+1,by=1)){
score[i,][1] <- score[(i-1),][1] + gapPen
trace[i,][1] <- 2
}
for (j in seq(2,length(seqB)+1,by=1)){
score[1,][j] <- score[1,][j-1] +gapPen
trace[1,][j] <- 1
}
return(list(score,trace))
}
## Setting up the id matrix
Abp <- c(1,0,0,0)
Cbp <- c(0,1,0,0)
Tbp <- c(0,0,1,0)
Gbp <- c(0,0,0,1)
dna <- c("A","C","T","G")
dim <- list(x=dna,y=dna)
id_matrix <- matrix(data=c(Abp,Cbp,Tbp,Gbp),nrow=4,ncol=4,dimnames=dim)
traceFun <- function(top, left, topleft){
## Function that returns the traceback direction in the trace matrix
## Inputs are vectors of 3 (NW) or 4 (SW)
# 1=left
if(left > top & left > topleft){
return(1)
}
# 2=top
else if(top > left & top > topleft){
return(2)
}
# 3=top and left
else if(top == left & top > topleft){
return(3)
}
# 4=topleft
else if(topleft > left & topleft > top){
return(4)
}
# 5=topleft and left
else if(topleft == left & topleft > top){
return(5)
}
# 6=topleft and top
else if(topleft > left & topleft == top){
return(6)
}
# 7=topleft, left and top
else if(topleft == left & topleft == top){
return(7)
}
}
NW <- function(seqA,seqB,gapPen,id_matrix){
# Creates empty matrices
start <- create(seqA,seqB,gapPen)
score <- start[[1]]
trace <- start[[2]]
for (i in seq(2,length(seqA)+1,by=1)){
for (j in seq(2,length(seqB)+1,by=1)){
# Finds the match score
posA <- seqA[i-1]
posB <- seqB[j-1]
posA <- match(posA,dna)
posB <- match(posB,dna)
matchVal <- id_matrix[posA,][posB]
# Determines the top score
topleft <- score[(i-1),][j-1] + matchVal
top <- score[(i-1),][j] + gapPen
left <- score[i,][j-1] + gapPen
# insert values into matrices
score[i,][j] <- max(top,left,topleft)
trace[i,][j] <- traceFun(top,left,topleft)
}
}
return(list(score,trace))
}
## Function to create empty trace and score matrices
create <- function(seqA,seqB,gapPen){
score <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
trace <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score[,1][1] <- 0
trace[,1][1] <- 0
for(i in seq(2,length(seqA)+1,by=1)){
score[i,][1] <- score[(i-1),][1] + gapPen
trace[i,][1] <- 2
}
for (j in seq(2,length(seqB)+1,by=1)){
score[1,][j] <- score[1,][j-1] +gapPen
trace[1,][j] <- 1
}
return(list(score,trace))
}
NW("AGC","AGC",-1,id_matrix)
NW("AGCAA","AGCAA",-1,id_matrix)
NW("A","A",-1,id_matrix)
NW("A","AG",-1,id_matrix)
NW("A","AA",-1,id_matrix)
NW("AA","AA",-1,id_matrix)
NW("AA","T",-1,id_matrix)
NW("T","T",-1,id_matrix)
NW("T","T",-1,id_matrix)
NW("T","A",-1,id_matrix)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
?mainPanel
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
NW("A","G",-1,id_matrix)[[1]]
NW("A","GG",-1,id_matrix)[[1]]
NW("A","G",-1,id_matrix)[[1]]
renderDataTable({NW("A","G",-1,id_matrix)[[1]]})
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
matrix(seq(1,20,by=1),nrows=1,ncol=1)
?matrix
matrix(seq(1,20,by=1),nrow=1,ncol=1)
matrix(seq(1,20,by=1),nrow=1)
output$score <- matrix(seq(1,20,by=1),ncol=5,nrow=4)
matrix(seq(1,20,by=1),ncol=5,nrow=4)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
create("AT","AT",-1)
create("AT","ATAAAAAA",-1)
seqA
length(seqA)
matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
trace <- matrix(data=NA,nrow=length(seqA)+1,ncol = length(seqB)+1)
score[,1][1] <- 0
trace[,1][1] <- 0
for(i in seq(2,length(seqA)+1,by=1)){
score[i,][1] <- score[(i-1),][1] + gapPen
trace[i,][1] <- 2
}
for (j in seq(2,length(seqB)+1,by=1)){
score[1,][j] <- score[1,][j-1] +gapPen
trace[1,][j] <- 1
}
score
trace
create(seqA,seqB,-1)
seqA <- "AAAAGGGGTTTT"
create(seqA,seqB,-1)
length(seqA)
strsplit(seqA,c())[[1]]
seqB <- strsplit(seqB,c())[[1]]
seqB
seqB
seqB <- "AAGGAAATA"
strsplit(seqB,c())[[1]]
strsplit(seqB,c())[[1]]
strsplit(seqB,c())[[1]]
strsplit(seqB,c())[[1]]
strsplit(seqB,c())[[1]]
shiny::runApp('~/Seneca/Dan/alignment')
rownames(score)
seqA
seqA <- strsplit(seqA,c())[[1]]
seqA
rownames(score) <- seqA
colnames(trace)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
c(str(0),seqA)
c(0,seqA)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
data.frame(score)
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
seqA
rbind(seqA,score)
rbind(c(0,seqA),score)
c(0,seqA)
score
NW(seqA,seqB,-1,id_matrix)
seqA <- "AGC"
seqB <- "GCT"
NW(seqA,seqB,-1,id_matrix)
NW <- function(seqA,seqB,gapPen,id_matrix){
seqA <- strsplit(seqA,c())[[1]]
seqB <- strsplit(seqB,c())[[1]]
# Creates empty matrices
start <- create(seqA,seqB,gapPen)
score <- start[[1]]
trace <- start[[2]]
for (i in seq(2,length(seqA)+1,by=1)){
for (j in seq(2,length(seqB)+1,by=1)){
# Finds the match score
posA <- seqA[i-1]
posB <- seqB[j-1]
posA <- match(posA,dna)
posB <- match(posB,dna)
matchVal <- id_matrix[posA,][posB]
# Determines the top score
topleft <- score[(i-1),][j-1] + matchVal
top <- score[(i-1),][j] + gapPen
left <- score[i,][j-1] + gapPen
# insert values into matrices
score[i,][j] <- max(top,left,topleft)
trace[i,][j] <- traceFun(top,left,topleft)
}
}
score <- data.frame(score)
trace <- data.frame(trace)
score <- rbind(c(0,seqA),score)
return(list(score,trace))
}
NW(seqA,seqB,-1,id_matrix)
?cbind
shiny::runApp('~/Seneca/Dan/alignment')
rbind(c(0,seqB),trace)
seqB
seqA
seqA <- strsplit(seqA,c())[[1]]
seqB <- strsplit(seqB,c())[[1]]
rbind(c(0,seqB),trace)
cbind(c(0,seqA),trace)
trace <- rbind(c(0,seqB),trace)
trace <- cbind(c(0,seqA),trace)
trace <- rbind(c(0,seqB),trace)
trace
NW <- function(seqA,seqB,gapPen,id_matrix){
seqA <- strsplit(seqA,c())[[1]]
seqB <- strsplit(seqB,c())[[1]]
# Creates empty matrices
start <- create(seqA,seqB,gapPen)
score <- start[[1]]
trace <- start[[2]]
for (i in seq(2,length(seqA)+1,by=1)){
for (j in seq(2,length(seqB)+1,by=1)){
# Finds the match score
posA <- seqA[i-1]
posB <- seqB[j-1]
posA <- match(posA,dna)
posB <- match(posB,dna)
matchVal <- id_matrix[posA,][posB]
# Determines the top score
topleft <- score[(i-1),][j-1] + matchVal
top <- score[(i-1),][j] + gapPen
left <- score[i,][j-1] + gapPen
# insert values into matrices
score[i,][j] <- max(top,left,topleft)
trace[i,][j] <- traceFun(top,left,topleft)
}
}
score <- data.frame(score)
trace <- data.frame(trace)
#         score <- rbind(c(0,seqB),score)
#         score <- cbind(c(0,seqA),score)
#
#         trace <- rbind(c(0,seqB),trace)
#         trace <- cbind(c(0,seqA),trace)
#
#
return(list(score,trace))
}
NW("AGC","AGC",-1,id_matrix)
score
trace
NW("AGC","AGC",-1,id_matrix)
NW("AGC","AGC",-1,id_matrix)[[1]]
class(NW("AGC","AGC",-1,id_matrix)[[1]])
seqA <- strsplit(seqA,c())[[1]]
seqB <- strsplit(seqB,c())[[1]]
# Creates empty matrices
start <- create(seqA,seqB,gapPen)
score <- start[[1]]
trace <- start[[2]]
for (i in seq(2,length(seqA)+1,by=1)){
for (j in seq(2,length(seqB)+1,by=1)){
# Finds the match score
posA <- seqA[i-1]
posB <- seqB[j-1]
posA <- match(posA,dna)
posB <- match(posB,dna)
matchVal <- id_matrix[posA,][posB]
# Determines the top score
topleft <- score[(i-1),][j-1] + matchVal
top <- score[(i-1),][j] + gapPen
left <- score[i,][j-1] + gapPen
# insert values into matrices
score[i,][j] <- max(top,left,topleft)
trace[i,][j] <- traceFun(top,left,topleft)
}
}
score <- data.frame(score)
trace <- data.frame(trace)
score
tracce
trace
rbind(c(0,seqB),score)
score <- rbind(c(0,seqB),score)
score <- cbind(c("Sequence",0,seqA),score)
score
trace <- rbind(c(0,seqB),trace)
trace <- cbind(c("Sequence",0,seqA),trace)
trace
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
x1=c(1:5)
y1=c(1:5)
round1 <- c(1,2,1,3,4)
df <- data.frame(x1,y1,round1)
df
plot(x=df$x1,y=df$y1)
text(df$x1, df$y1, labels=format(round(df$y1,df$round1)) , cex= 0.7, pos=3)
?round
round(round1,digits=1)
round(round1,digits=2)
round(1,digits=2)
signif(round1,digits=2)
signif(1,digits=3)
signif(1,digits=6)
signif(1.23,digits=6)
x1=c(1:5)
y1=c(1:5)
round1 <- c(1,2,1,3,4)
df <- data.frame(x1,y1,round1)
df
plot(x=df$x1,y=df$y1)
text(df$x1, df$y1, labels=format(round(df$y1,df$round1)) , cex= 0.7, pos=3)
round(1.313213,digits=3)
options(digits=2)
x1=c(1:5)
y1=c(1:5)
round1 <- c(1,2,1,3,4)
df <- data.frame(x1,y1,round1)
df
plot(x=df$x1,y=df$y1)
text(df$x1, df$y1, labels=format(round(df$y1,df$round1)) , cex= 0.7, pos=3)
?options
signif(round1,digits=2)
format(round(round1, 2), nsmall = 2)
## Assign how many digits you want to digits:
digits=3
format(round(round1,digits),nsmall=digits)
df <- data.frame(x1,y1,round1)
df
plot(x=df$x1,y=df$y1)
text(df$x1, df$y1, labels=format(round(df$y1,df$round1)) , cex= 0.7, pos=3)
round1 <- format(round(round1,digits),nsmall=digits)
df <- data.frame(x1,y1,round1)
df
plot(x=df$x1,y=df$y1)
text(df$x1, df$y1, labels=format(round(df$y1,df$round1)) , cex= 0.7, pos=3)
plot(x=df$x1,y=df$y1)
text(df$x1, df$y1, labels=round1 , cex= 0.7, pos=3)
?format
source('http://depot.sagebase.org/CRAN.R')
pkgInstall(c("synapseClient"))
shiny::runApp('~/Seneca/Dan/alignment')
shiny::runApp('~/Seneca/Dan/alignment')
max(2,2)
?r.bind
?rbind
shiny::runApp('~/Perl/alignment/ShinyApp')
source("create.R",local=T)
setwd()
getwd()
setwd("C:/Users/Nishanth/Documents/Perl/alignment/shinyApp")
shiny::runApp('~/Perl/alignment/ShinyApp')
shiny::runApp('~/Perl/alignment/ShinyApp')
shiny::runApp('~/Perl/alignment/ShinyApp')
shiny::runApp('~/Perl/alignment/ShinyApp')
shiny::runApp('~/Perl/alignment/ShinyApp')
shiny::runApp('~/Perl/alignment/ShinyApp')
dirname(parent.frame(2)$ofile)
shiny::runApp('~/Perl/alignment/ShinyApp')
shiny::runApp('~/Perl/alignment/ShinyApp')
